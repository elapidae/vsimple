//=======================================================================================
2020-03-24
//  Подробности синтаксиса удалены
class vsettings
{
    class schema;
    
    void set( key, val, comment = {} );

    Type get<Type>( key );

    vsettings subgroup( name, comment = {} );

    bool has_key      ( key  );
    bool has_subgroup ( name );

    //  Список ключей и имен подгрупп
    strings keys();
    strings subgroups();

    string to_ini();
    
    //  NB! Не очищает свое содержимое! Читает значения поверх того, что уже есть.
    //  Можно прочитать два и более ini и они объединяться, для одинаковых ключей 
    //  выиграет последнее прочитанное значение.
    void from_ini( ini );

    //  Читает и пишет из/в файлов.
    void from_ini_file( fname );   
    void to_ini_file  ( fname );
};
//=======================================================================================
class vsettings::schema
{    
    void add( key, T *val, comment = {} );

    void capture( vsettings );
    void capture_from_ini( fname );

    vsettings build() const;
    void save_to_ini( fname );

    void subgroup( name, comment = {} );
    void end_subgroup();
};
//=======================================================================================


Модуль задуман, чтобы сохранять и читать настройки программ в ini файлах без внешних 
библиотек.

Класс vsettings позволяет сохранять пары {ключ, значение} в произвольном порядке, 
порядок сохраняется (например, в Qt::QSettings порядок не сохраняется).

Также можно рекурсивно запрашивать подгруппы настроек. Работа с каждой подгруппой 
такая же как и с корнем. 

Схема задумана как жестко заданный набор параметров, обязательный для прочтения.
Она же позволяет сформировать настройки по умолчанию, из имеющихся полей.

Классы vsettings и vsettings::schema организованны по принципу shared_ptr, т.е. если 
класс копируется, то обе копии будут оперировать одной сущностью (как в C#). 
Глубокое копирование [пока] не предусмотрено, задача у классов вполне утилитарная, 
не вижу смысла делать лишнего.

За примерами -- в тестирование.

//=======================================================================================
2020-03-15
От Всеволода замечания:

1) TODO: README неплохо было бы сделать очень подробным, трудно с ходу понять, что есть что


2) str_list'ом называть вектор строк - может случиться когнитивный диссонанс (на мой взгляд)
-> сделать str_vector

3) same в node_iface лучше на isSame
4) mine лучше на data или getPtr
-> same вообще убрать, mine -> stored_ptr

5) Для чего служит add_escaped?
-> экранирование бинарных символов.

6) Почему не сделать мапу из records, а не вектор? Так поиск по ключу будет проще.
-> необходимо схранить последовательность внесения.

7) Тоже касается subgroups
==/==

8) has лучше в has_key (подобно has_subgroup)
-> принято

{
    9) keys лучше в list_all_keys
    -> ну OK, надо пробовать. all_keys.

    10) subgroup_names лучше в list_all_subgroups
    -> all_subgroups
} -> неа, переименовал subgroup_names() в subgroups(). Так у других сделано.


11) from_ini_file: либо добавить проверку на расширение .ini, л
        ибо переименовать в read_from_file
12) Тоже с to_ini_file
???? надо думать
-> str() и load() переименовал в to_ini(), from_ini()


13) subgroup лучше в add_subgroup
-> нет

14) unsubgroup лучше в del_subgroup
-> end_subgroup()
//=======================================================================================

