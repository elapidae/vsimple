//=======================================================================================

        vlog -- базовая система сборки логов.

        NB! Еще Смотрите файлик readme.md

//=======================================================================================

    Касаемо логгирования, как такового: в законченной программе логгирование это аналог
медицинской карточки пациента, либо бортового журнала судна. В логах следует фиксировать
ход выполнения заложенной в программу задачи, возникающие особенности и неприятности,
принятые настройки и перенастройки и прочие действия, позволяющие, хотя бы "на глаз",
установить степень и качество решаемой задачи. В логи не следует писать всё подряд по
принципу "потом дядя разберется", этим "дядей" будете вы, ваш сосед, руководитель,
который выписывает вам премию, Юра Карабанов, а еще маньяк, который знает где вы живете.
Т.е. фиксируем температуру пациента, но не его мысли о медсестре.

    В незаконченной и отлаживаемой программе, конечно же, задачи чуть другие, а именно:
помочь разработчику в его труде. Все вышеперечисленное остается в силе, но при разработке
часто хочется (а следовательно, надо!) быстренько вывести в терминал пару чисел, вывести
какие-нибудь параметры, трассировать, буквально построчно, какую-нибудь часть и прочие
радости отладки, 100500 их. При этом, код программы может перерабатываться неоднократно,
хотелось бы (=> надо!) быстро находить выводы этих сообщений в коде.

    Первое, что даёт vlog -- работает из коробки, выводит сообщения в консоль, помечая
все сообщения их местонахождением в коде. Это архиважная функция, т.к. экономит кучу
времени при поиске ключевых точек в коде, и вообще всех точек, которые пачкают консоль.

Система, условно, состоит из трех частей:
 - сбор данных в любом месте проекта/модуля etc;
 - сбор всех вхождений логов в общее место;
 - непосредственно, логгирование любой удобной вам системой.

    Базовая часть логгирования сама сохранением по файлам/сислогам не занимается.
Максимум, что предоставляет -- запись в консоль, больше даже в качестве примера.

//=======================================================================================

    Основная часть -- сбор данных, повторяет (c оговорками) синтаксис стандартных
потоков вывода std::cout, std::cerr.

Уровней логгирования введено пять:

trace   --  для трассировки программы. Обычно нужно для сканирования участка кода.
            В продакшене лучше, чтобы таких собщений не было.

debug   --  инструмент разработчика. Это когда нужно вывести пару цифр в консоль.
            В продакшене лучше, чтобы таких собщений не было.

runlog  --  отчет о штатном ходе работы программы. Например "порт открыт",
            "соединение принято", "камера синхронизировалась" и пр. хорошие checkpoint-ы.

warning --  отчет о нештатной ситуации в программе, которая, однако, не препятнствует
            дальней деятельности программы. Например, "получатель данных отсоединился",
            "навигатор потерял спутники", "связь потеряна, перехожу в автономный режим".

fatal   --  отчет о ситуации, препятствующей дальнейшей деятельности программы.
            После фаталов, программы обычно сворачивают деятельсть (либо идут к началу).
            Например: "не могу захватить UDP порт", "Камера не обнаружена",
            "меня превратили в корову".

Последние три можно рассматривать как сигналы светофора:
    runlog  -- зеленый [все OK, вперед!];
    warning -- желтый  [внимание, предупреждение];
    fatal   -- красный [СТОЙ! Неприятности!];

Касаемо синтаксиса -- разговор долгий, в папке vlog есть примеры.

//=======================================================================================

За сбор и логгирование отвечают три статические метода:
VLogger::clear_executers();
VLogger::add_executer( Executer );  // где Executer -- сущность, принимающая один
                                    // аргумент типа VLogEntry. подробнее в заголовках.

Чтобы логгировать следует добавить свой обработкик через метод add_executer.

Подробнее -- по мере возможностей.

//=======================================================================================
